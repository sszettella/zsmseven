service: zsmseven-backend-processing-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 7
  environment:
    POLYGON_API_KEY: ${env:POLYGON_API_KEY}
    TICKER_DATA_TABLE: ticker-data-${self:provider.stage}
    PORTFOLIOS_TABLE: user-portfolios-${self:provider.stage}
    POSITIONS_TABLE: portfolio-positions-${self:provider.stage}
    ANALYSES_TABLE: portfolio-analyses-${self:provider.stage}
    SQS_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/076311063214/portfolio-queue-${self:provider.stage}
    XAI_API_URL: ${env:XAI_API_URL}
    XAI_API_KEY: ${env:XAI_API_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TICKER_DATA_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PORTFOLIOS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PORTFOLIOS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSITIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSITIONS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANALYSES_TABLE}
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource: arn:aws:sqs:${self:provider.region}:076311063214:portfolio-queue-${self:provider.stage}
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"

functions:
  # Process all tickers from portfolios and send to SQS
  processTickers:
    handler: src/handlers/process_tickers.lambda_handler
    timeout: 60
    events:
      # Run Monday-Friday at 9:30 PM EST (4:30 AM UTC Tuesday-Saturday)
      - schedule:
          rate: cron(30 4 ? * TUE-SAT *)
          enabled: true
          description: "Process portfolio tickers and queue for data updates"

  # Process individual ticker from SQS queue
  processTicker:
    handler: src/handlers/process_ticker.lambda_handler
    timeout: 300
    reservedConcurrency: 1
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:076311063214:portfolio-queue-${self:provider.stage}
          batchSize: 1

  # Analyze portfolio using XAI
  analyzePortfolio:
    handler: src/handlers/analyze_portfolio.lambda_handler
    timeout: 300
    events:
      # Run Monday-Friday at 1:00 AM EST (6:00 AM UTC)
      - schedule:
          rate: cron(0 6 ? * TUE-SAT *)
          enabled: true
          description: "Analyze ZSM Seven portfolio"
          input:
            portfolio_name: "ZSM Seven"

resources:
  Resources:
    # SQS Queue for ticker processing
    # NOTE: Using existing portfolio-queue from old api/ deployment
    # Commenting out to avoid conflicts during initial deployment
    # TickerProcessingQueue:
    #   Type: AWS::SQS::Queue
    #   DeletionPolicy: Retain
    #   Properties:
    #     QueueName: ticker-processing-queue-${self:provider.stage}
    #     VisibilityTimeout: 300
    #     MessageRetentionPeriod: 1209600  # 14 days

    # Ticker data table - stores market data
    # NOTE: This table already exists from the old api/ deployment
    # Commenting out to avoid conflicts during initial deployment
    # TickerDataTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.environment.TICKER_DATA_TABLE}
    #     BillingMode: PAY_PER_REQUEST
    #     AttributeDefinitions:
    #       - AttributeName: ticker
    #         AttributeType: S
    #       - AttributeName: timestamp
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: ticker
    #         KeyType: HASH
    #       - AttributeName: timestamp
    #         KeyType: RANGE

    # Portfolio analyses table - stores XAI analysis results
    # NOTE: This table already exists from the old api/ deployment
    # Commenting out to avoid conflicts during initial deployment
    # PortfolioAnalysesTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.environment.ANALYSES_TABLE}
    #     BillingMode: PAY_PER_REQUEST
    #     AttributeDefinitions:
    #       - AttributeName: portfolio
    #         AttributeType: S
    #       - AttributeName: timestamp
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: portfolio
    #         KeyType: HASH
    #       - AttributeName: timestamp
    #         KeyType: RANGE

plugins:
  - serverless-dotenv-plugin
  - serverless-python-requirements

useDotenv: true

custom:
  pythonRequirements:
    dockerizePip: false
    slim: true
    strip: false
