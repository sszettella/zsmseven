service: zsmseven-backend-processing-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 7
  environment:
    POLYGON_API_KEY: ${env:POLYGON_API_KEY}
    TICKER_DATA_TABLE: ticker-data-${self:provider.stage}
    PORTFOLIOS_TABLE: user-portfolios-${self:provider.stage}
    POSITIONS_TABLE: portfolio-positions-${self:provider.stage}
    ANALYSES_TABLE: portfolio-analyses-${self:provider.stage}
    SQS_QUEUE_URL: ${self:custom.sqsQueueUrl.${self:provider.stage}}
    ANALYSIS_QUEUE_URL: ${self:custom.analysisQueueUrl.${self:provider.stage}}
    XAI_API_URL: ${env:XAI_API_URL}
    XAI_API_KEY: ${env:XAI_API_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TICKER_DATA_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PORTFOLIOS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PORTFOLIOS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSITIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSITIONS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANALYSES_TABLE}
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - ${self:custom.sqsQueueArn.${self:provider.stage}}
            - ${self:custom.analysisQueueArn.${self:provider.stage}}
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"

functions:
  # Process all tickers from portfolios and send to SQS
  processTickers:
    handler: src/handlers/process_tickers.lambda_handler
    timeout: 60
    events:
      # Run Monday-Friday at 9:30 PM EST (4:30 AM UTC Tuesday-Saturday)
      - schedule:
          rate: cron(30 4 ? * TUE-SAT *)
          enabled: true
          description: "Process portfolio tickers and queue for data updates"

  # Process individual ticker from SQS queue
  processTicker:
    handler: src/handlers/process_ticker.lambda_handler
    timeout: 300
    reservedConcurrency: 1
    events:
      - sqs:
          arn: ${self:custom.sqsQueueArn.${self:provider.stage}}
          batchSize: 1

  # Collect all portfolio IDs and queue them for analysis
  analyzePortfolios:
    handler: src/handlers/analyze_portfolios.lambda_handler
    timeout: 60
    events:
      # Run Monday-Friday at 1:00 AM EST (6:00 AM UTC)
      - schedule:
          rate: cron(0 6 ? * TUE-SAT *)
          enabled: true
          description: "Queue all portfolios for analysis"

  # Analyze individual portfolio from SQS queue
  analyzePortfolio:
    handler: src/handlers/analyze_portfolio.lambda_handler
    timeout: 300
    reservedConcurrency: 5
    events:
      - sqs:
          arn: ${self:custom.analysisQueueArn.${self:provider.stage}}
          batchSize: 1

resources:
  Conditions:
    IsProd: !Equals
      - ${self:provider.stage}
      - prod
    IsDev: !Not
      - !Condition IsProd

  Resources:
    # SQS Queue for ticker processing
    # Only created for prod stage (dev uses existing queue from old api/ deployment)
    # DeletionPolicy: Retain ensures queue is not deleted when stack is removed
    PortfolioQueue:
      Type: AWS::SQS::Queue
      Condition: IsProd
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        QueueName: portfolio-queue-${self:provider.stage}
        VisibilityTimeout: 300
        MessageRetentionPeriod: 345600  # 4 days

    # SQS Queue for portfolio analysis processing
    # Only created for dev (prod uses existing orphaned queue)
    AnalysisQueue:
      Type: AWS::SQS::Queue
      Condition: IsDev
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        QueueName: portfolio-analysis-queue-${self:provider.stage}
        VisibilityTimeout: 300
        MessageRetentionPeriod: 345600  # 4 days

    # Ticker data table - stores market data
    # Only created for prod stage (dev uses existing table from old api/ deployment)
    TickerDataTable:
      Type: AWS::DynamoDB::Table
      Condition: IsProd
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TICKER_DATA_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: ticker
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: ticker
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE

    # Portfolio analyses table - stores XAI analysis results
    # Only created for prod stage (dev uses existing table from old api/ deployment)
    PortfolioAnalysesTable:
      Type: AWS::DynamoDB::Table
      Condition: IsProd
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        TableName: ${self:provider.environment.ANALYSES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: portfolioId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: portfolioId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE

plugins:
  - serverless-dotenv-plugin
  - serverless-python-requirements

useDotenv: true

custom:
  # Stage-specific SQS queue configuration
  # Dev uses existing queue from old api/ deployment
  # Prod uses CloudFormation-managed queue
  sqsQueueUrl:
    dev: https://sqs.us-east-1.amazonaws.com/076311063214/portfolio-queue-dev
    prod: !GetAtt PortfolioQueue.QueueUrl

  sqsQueueArn:
    dev: arn:aws:sqs:us-east-1:076311063214:portfolio-queue-dev
    prod: !GetAtt PortfolioQueue.Arn

  # Stage-specific analysis queue configuration
  # Dev uses CloudFormation, prod references existing orphaned queue
  analysisQueueUrl:
    dev: !GetAtt AnalysisQueue.QueueUrl
    prod: https://sqs.us-east-1.amazonaws.com/076311063214/portfolio-analysis-queue-prod

  analysisQueueArn:
    dev: !GetAtt AnalysisQueue.Arn
    prod: arn:aws:sqs:us-east-1:076311063214:portfolio-analysis-queue-prod

  pythonRequirements:
    dockerizePip: false
    slim: true
    strip: false
