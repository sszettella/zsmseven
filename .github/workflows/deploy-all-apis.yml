name: Deploy All APIs

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod

jobs:
  deploy-auth-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Serverless Framework
        run: npm install -g serverless@3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          cd auth-api
          npm install

      - name: Build TypeScript
        run: |
          cd auth-api
          npm run build

      - name: Create custom domain mapping (if needed)
        run: |
          cd auth-api
          echo "Creating domain mapping for /auth base path..."
          serverless create_domain --stage ${{ github.event.inputs.stage }} || echo "✓ Domain mapping already exists"
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        continue-on-error: true

      - name: Deploy Auth API
        run: |
          cd auth-api
          serverless deploy --stage ${{ github.event.inputs.stage }}
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}

  deploy-users-api:
    runs-on: ubuntu-latest
    needs: deploy-auth-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Serverless Framework
        run: npm install -g serverless@3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          cd users-api
          npm install

      - name: Build TypeScript
        run: |
          cd users-api
          npm run build

      - name: Create custom domain mapping (if needed)
        run: |
          cd users-api
          echo "Creating domain mapping for /users base path..."
          serverless create_domain --stage ${{ github.event.inputs.stage }} || echo "✓ Domain mapping already exists"
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        continue-on-error: true

      - name: Deploy Users API
        run: |
          cd users-api
          serverless deploy --stage ${{ github.event.inputs.stage }}
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}

  deploy-options-trades-api:
    runs-on: ubuntu-latest
    needs: deploy-auth-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Serverless Framework
        run: npm install -g serverless@3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          cd options-trades-api
          npm install

      - name: Build TypeScript
        run: |
          cd options-trades-api
          npm run build

      - name: Create custom domain mapping (if needed)
        run: |
          cd options-trades-api
          echo "Creating domain mapping for /trades base path..."
          serverless create_domain --stage ${{ github.event.inputs.stage }} || echo "✓ Domain mapping already exists"
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        continue-on-error: true

      - name: Deploy Options Trades API
        run: |
          cd options-trades-api
          serverless deploy --stage ${{ github.event.inputs.stage }}
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

  deploy-summary:
    runs-on: ubuntu-latest
    needs: [deploy-auth-api, deploy-users-api, deploy-options-trades-api]
    steps:
      - name: Deployment Summary
        run: |
          echo "✅ All APIs deployed successfully to ${{ github.event.inputs.stage }}!"
          echo ""
          echo "Auth API: https://api.zsmproperties.com/auth"
          echo "Users API: https://api.zsmproperties.com/users"
          echo "Options Trades API: https://api.zsmproperties.com/trades"
